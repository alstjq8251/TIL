질문할땐 
- 하려던게 뭔지(목적) 
- 에러 메세지, 에러가 발생한 화면(에러 정보)
- 어떤 작업을 해봤는지, 참고한 자료가 있는지

GIT 에 관해서

1주차 나를위한 git -> 내 프로젝트 사용할 수 있다. 정도
2번째 강의 - github - 회원가입,git 설치,sourcetree 설치
github 내 settings/tokens에서 repo workflow admin:org admin:public_key, gist, user, delete_repo 설정후 토큰 발급
sourcetree 언어 한글로 설정 후 도구 - 옵션 - 인증 - 계정 추가 - 호스팅 서비스(github) , 인증(basic)사용자명(github 유저네임)-> 비밀번호(발급받은 토큰 붙여넣기) 생성된 계정이 깃허브 계정과 일치하나 확인 
3
git, github 차이
git은 프로젝트의 버전 관리를 위한 도구
 -> 변동 내역들을 히스토리에서 확인할 수 있고 작업단위를 나눌 수 있음
  -> 프로그래밍중 성공했던 내역을 저장 후 수정한 결과가 실패한다면 성공한 코드로 복구 가능 
   -> 어떤 부분이 변경된지를 확인 후 오류 확인 가능
 git은 협업해서 프로젝트를 만들 시 같은 파일명의 내용이 어떤 부분들이 다른지 자동으로 비교 및 어떤부분 반영할지 선택 가능!
  git은 모든파일 자동 비교가 가능할지? - 기본설정은 코드관리를 위한도구라 코드는 가능 txt등 가능 
   어떤부분 수정되고 변경됐는지 라인별로 확인 가능
날짜와 변동 내역을 확인 가능하여 오류들을 한눈에 묶어 확인 가능
github git프로젝트를 올릴 수 있는 원격 저장소이면서 커뮤니티 기능 제공하는 서비스  
git은 컴퓨터에 사용하고 버전관리도구 github 원격으로 올리는 클라우드같이 사이트에 들어가 프로젝트를 올리고 깃으로 커뮤니티 기능 사용 가능
로컬저장소의 git프로젝트를 github에 올려(url) 공유 가능하고 이슈로 개발해야될 기능 관리 가능하고
회의도 가능하고 다른 프로젝트 구경 및 관심있는 기술 주제를 추천받음
sourcetree란? git을 쉽게 사용할 수 있는 도구 - 전세계적으로 많이쓰여 참고할 자료 많고 초중급자까지 사용 가능한 여러 기능 제공
 -> git을 이해할 수 있고 , 개념컨셉에 집중할 수 있게 도구 사용 
실무에선 git과 github를 조합하여 사용함 - git을 버전관리 필수 도구로 사용함(날짜별로 변경내역 확인 용이, 협업 인원의 작업 내역 확인및 관리 용이)
버그리포트도 받을 수 있음(사용자들의 버그를 받아 확인 가능)
issue - 개발해야할 기능 관리(할일 정하기) 및 토론 가능
1-4
버전관리 , commit
통상적으로 버전1 버전2가 다른지 폴더 만들어 비교함 - 버전마다 라벨링
git은 버전마다 파일을 만들어줄 필요없이 중간중간 커밋(누가 , 언제, 현재 프로젝트 상태포함해 작업관리)하는 것
git은 커밋을 통해 현제 프로젝트 상태 저장 및 조회 - 프로젝트 전체 상태 포착
어떤 부분이 바뀌엇는지 직관적으로 확인 가능 - 정보들 저장하는게 커밋
버전관리 - 3가지 정보 남기는것 커밋 - 현 상태 저장 깃 - 버전관리 

1-5 프로그래밍시 파일/폴더명은 코드 변수명같이 직관적으로 확인 가능하게 명명하기
기존에 있던 프로젝트를 git속성 추가 - git initialize(깃 초기화)-깃이 관리할게 라고함
깃 프젝 없애는법 - 우클릭 후 삭제 
스테이지에서 올리면 - 해당 내역 커밋할거야 라는 기능

1-6 
그래프 - 커밋 역사가 이어져있다 연대기
맨 마지막에 처음 프로젝트 보여줌
날짜 작성내역,작성자 3개정보 저장 , 히스토리에 어떤 내용, 코드가 변경됐는지 파악 가능
커밋 식별하기 위한 정보가 커밋id - 커밋 id로 되돌리고 불러오고등이 가능

1-7
버전관리란 - 프로젝트 상태가 변경되는 정보를 알고있다는 뜻 Git - Commit을 사용해 버전을 관리
컴퓨터의 프로젝트를 git이 관리하는 프로젝트로 만드는걸 초기화한다라고 하며 현 프로젝트 상태 저장하는것을 commit이라고 함
commit에는 누가 언제 변경내용을 담고 작업내용이 어떤것인지 알아볼 수 있는 메세지를 commit메세지 라고 함
commit에 반영할지 안할지 파일단위 선택 가능, 반영 파일 선택하는걸 add(staging)이라고 함
commit한 기록은 history로 확인가능
한작업은 git initialize , add(staging), commit 실습과정
add한내용 commit 메세지 내용담아 commit

1-8 원격 repo
깃으로 관리되는 프로젝트를 깃에선 repository repo라부름
내 컴퓨터에 저장된 프로젝트 로컬 repo라 부름
깃헙처럼 다른곳에서 접속할 수 있는 공간에 저장된걸 remote repository 원격 repo라 부름
깃헙은 깃으로 관리하는 프로젝트가 저장된 공간
원격 repo와 로컬 repo가 연결된것처럼 사용 가능 
로컬repo와 원격 repo를 연결하는걸 트래킹 정확히는 브렌치 트레킹
로컬 레포지토리는 어떤 원격 레포지토리와 연결되었느지 정보를 갖고있음
로컬 repo와 원격repo는 커밋의 내용과는 연관되어있지 않음 -> 수동으로 반영하게 되어있음
1:1로 연결되는것이아니라 여러개 연결되어있을 수 있음
로컬repo의 내용을 원격 repo에 반영하는걸 push라고 하고 원격 repo의 내용을 가져오는걸 pull이라고함
로컬repo의 내용이없을때 원격 repo의 내용을 가져오는건 clone(download)
1-9
깃헙 repo만듬 - 설정-원격-추가-원격repo주소- 추가완료 ->
로컬 repo -> branch , history 우클릭 -> push - 원격repo에 반영완료
원격 repo -> 커밋 해놓은 뒤 sourcetree에서 pull -> 로컬 repo에 반영됨
혼자 작업할땐 - pull -> commit -> push
원격 repo의 url복사 후 clone - 원격 url에 붙여넣고 대상 폴더 선택 하면 clone 완료 
1-10
원격repo만 잇을땐 clone
둘다 있을땐 로컬 repo가 원격repo를 tracking하도록 설정
협업,혼자 여러 컴퓨터 사용할때 하나의 원격repo에 여러 로컬repo를 연결시킬 수 있고 하나의 프로젝트를 동시에 작업하는게 가능해진다

